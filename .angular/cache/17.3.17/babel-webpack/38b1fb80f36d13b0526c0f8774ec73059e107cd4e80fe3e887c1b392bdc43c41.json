{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../report.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"ng2-charts\";\nfunction ReportComponent_table_12_tr_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const d_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(d_r1.day);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(d_r1.count);\n  }\n}\nfunction ReportComponent_table_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 5)(1, \"thead\")(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"Day\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6, \"Count\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(7, \"tbody\");\n    i0.ɵɵtemplate(8, ReportComponent_table_12_tr_8_Template, 5, 2, \"tr\", 6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.data);\n  }\n}\nfunction currentMonthRange() {\n  const now = new Date();\n  return {\n    start: new Date(now.getFullYear(), now.getMonth(), 1).toISOString().slice(0, 10),\n    end: new Date(now.getFullYear(), now.getMonth() + 1, 0).toISOString().slice(0, 10)\n  };\n}\nexport class ReportComponent {\n  constructor(api) {\n    this.api = api;\n    this.startDate = '';\n    this.endDate = '';\n    this.data = [];\n    this.chartData = {\n      labels: [],\n      datasets: [{\n        data: [],\n        label: 'Count'\n      }]\n    };\n  }\n  ngOnInit() {\n    const r = currentMonthRange();\n    this.startDate = r.start;\n    this.endDate = r.end;\n    this.load();\n  }\n  load() {\n    this.api.dayCount(this.startDate, this.endDate).subscribe(res => {\n      this.data = res;\n      this.chartData = {\n        labels: res.map(d => d.day),\n        datasets: [{\n          data: res.map(d => d.count),\n          label: 'Count'\n        }]\n      };\n    });\n  }\n  static {\n    this.ɵfac = function ReportComponent_Factory(t) {\n      return new (t || ReportComponent)(i0.ɵɵdirectiveInject(i1.ReportService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ReportComponent,\n      selectors: [[\"app-report\"]],\n      decls: 13,\n      vars: 5,\n      consts: [[1, \"toolbar\"], [\"type\", \"date\", 3, \"ngModelChange\", \"ngModel\"], [3, \"click\"], [\"baseChart\", \"\", 3, \"data\", \"type\"], [\"style\", \"margin-top:12px\", 4, \"ngIf\"], [2, \"margin-top\", \"12px\"], [4, \"ngFor\", \"ngForOf\"]],\n      template: function ReportComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h2\");\n          i0.ɵɵtext(1, \"Day-wise Prescription Count\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"div\", 0)(3, \"label\");\n          i0.ɵɵtext(4, \"Start\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"input\", 1);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function ReportComponent_Template_input_ngModelChange_5_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.startDate, $event) || (ctx.startDate = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"label\");\n          i0.ɵɵtext(7, \"End\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"input\", 1);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function ReportComponent_Template_input_ngModelChange_8_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.endDate, $event) || (ctx.endDate = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"button\", 2);\n          i0.ɵɵlistener(\"click\", function ReportComponent_Template_button_click_9_listener() {\n            return ctx.load();\n          });\n          i0.ɵɵtext(10, \"Load\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(11, \"canvas\", 3);\n          i0.ɵɵtemplate(12, ReportComponent_table_12_Template, 9, 1, \"table\", 4);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.startDate);\n          i0.ɵɵadvance(3);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.endDate);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"data\", ctx.chartData)(\"type\", \"line\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.data.length);\n        }\n      },\n      dependencies: [i2.NgForOf, i2.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i4.BaseChartDirective],\n      styles: [\".toolbar[_ngcontent-%COMP%] {\\n  display: flex;\\n  gap: 12px;\\n  align-items: center;\\n  margin: 12px 0;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcmVwb3J0cy9yZXBvcnQvcmVwb3J0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQVMsYUFBQTtFQUFhLFNBQUE7RUFBUyxtQkFBQTtFQUFtQixjQUFBO0FBS2xEIiwic291cmNlc0NvbnRlbnQiOlsiLnRvb2xiYXJ7ZGlzcGxheTpmbGV4O2dhcDoxMnB4O2FsaWduLWl0ZW1zOmNlbnRlcjttYXJnaW46MTJweCAwfVxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","d_r1","day","count","ɵɵtemplate","ReportComponent_table_12_tr_8_Template","ɵɵproperty","ctx_r1","data","currentMonthRange","now","Date","start","getFullYear","getMonth","toISOString","slice","end","ReportComponent","constructor","api","startDate","endDate","chartData","labels","datasets","label","ngOnInit","r","load","dayCount","subscribe","res","map","d","ɵɵdirectiveInject","i1","ReportService","selectors","decls","vars","consts","template","ReportComponent_Template","rf","ctx","ɵɵtwoWayListener","ReportComponent_Template_input_ngModelChange_5_listener","$event","ɵɵtwoWayBindingSet","ReportComponent_Template_input_ngModelChange_8_listener","ɵɵlistener","ReportComponent_Template_button_click_9_listener","ɵɵelement","ReportComponent_table_12_Template","ɵɵtwoWayProperty","length"],"sources":["D:\\ASSIGNFRONTED\\cmed-prescription\\src\\app\\reports\\report\\report.component.ts","D:\\ASSIGNFRONTED\\cmed-prescription\\src\\app\\reports\\report\\report.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ReportService, DayWiseReportDTO } from '../report.service';\nimport { ChartConfiguration } from 'chart.js';\n\nfunction currentMonthRange(){\n  const now = new Date();\n  return {\n    start: new Date(now.getFullYear(), now.getMonth(), 1).toISOString().slice(0,10),\n    end: new Date(now.getFullYear(), now.getMonth()+1, 0).toISOString().slice(0,10)\n  };\n}\n\n@Component({\n  selector: 'app-report',\n  templateUrl: './report.component.html',\n  styleUrls: ['./report.component.scss']\n})\nexport class ReportComponent implements OnInit {\n  startDate=''; endDate=''; data: DayWiseReportDTO[] = [];\n  chartData: ChartConfiguration['data'] = { labels: [], datasets: [{ data: [], label: 'Count' }] };\n\n  constructor(private api: ReportService){}\n\n  ngOnInit(){ const r = currentMonthRange(); this.startDate=r.start; this.endDate=r.end; this.load(); }\n\n  load(){\n    this.api.dayCount(this.startDate, this.endDate).subscribe(res => {\n      this.data = res;\n      this.chartData = {\n        labels: res.map(d => d.day),\n        datasets: [{ data: res.map(d => d.count), label: 'Count' }]\n      };\n    });\n  }\n}\n","<h2>Day-wise Prescription Count</h2>\n<div class=\"toolbar\">\n  <label>Start</label><input type=\"date\" [(ngModel)]=\"startDate\">\n  <label>End</label><input type=\"date\" [(ngModel)]=\"endDate\">\n  <button (click)=\"load()\">Load</button>\n</div>\n<canvas baseChart [data]=\"chartData\" [type]=\"'line'\"></canvas>\n<table *ngIf=\"data.length\" style=\"margin-top:12px\">\n  <thead><tr><th>Day</th><th>Count</th></tr></thead>\n  <tbody><tr *ngFor=\"let d of data\"><td>{{d.day}}</td><td>{{d.count}}</td></tr></tbody>\n</table>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}