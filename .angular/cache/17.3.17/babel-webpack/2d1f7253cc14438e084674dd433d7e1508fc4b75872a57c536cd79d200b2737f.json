{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.tokenKey = 'jwt_token';\n  }\n  // Unwrap backend Response wrapper -> flat LoginPayload\n  login(username, password) {\n    return this.http.post(`${environment.apiBase}/auth/login`, {\n      username,\n      password\n    }).pipe(map(res => res?.obj) // unwrap করে শুধুমাত্র obj ফেরত\n    );\n  }\n  saveToken(token) {\n    localStorage.setItem(this.tokenKey, token);\n  }\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n  logout() {\n    localStorage.removeItem(this.tokenKey);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","map","AuthService","constructor","http","tokenKey","login","username","password","post","apiBase","pipe","res","obj","saveToken","token","localStorage","setItem","getToken","getItem","isLoggedIn","logout","removeItem","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\ASSIGNFRONTED\\cmed-prescription\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nexport interface LoginPayload {\n  token: string;\n  username?: string;\n  roles?: string[];\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private tokenKey = 'jwt_token';\n\n  constructor(private http: HttpClient) {}\n\n  // Unwrap backend Response wrapper -> flat LoginPayload\n  login(username: string, password: string): Observable<LoginPayload> {\n    return this.http.post<any>(`${environment.apiBase}/auth/login`, { username, password })\n      .pipe(\n        map(res => res?.obj as LoginPayload)   // unwrap করে শুধুমাত্র obj ফেরত\n      );\n  }\n\n  saveToken(token: string) {\n    localStorage.setItem(this.tokenKey, token);\n  }\n\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n\n  logout() {\n    localStorage.removeItem(this.tokenKey);\n  }\n}\n"],"mappings":"AAEA,SAASA,WAAW,QAAQ,gCAAgC;AAC5D,SAASC,GAAG,QAAQ,gBAAgB;;;AAUpC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,QAAQ,GAAG,WAAW;EAES;EAEvC;EACAC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAM,GAAGT,WAAW,CAACU,OAAO,aAAa,EAAE;MAAEH,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CACpFG,IAAI,CACHV,GAAG,CAACW,GAAG,IAAIA,GAAG,EAAEC,GAAmB,CAAC,CAAG;KACxC;EACL;EAEAC,SAASA,CAACC,KAAa;IACrBC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACZ,QAAQ,EAAEU,KAAK,CAAC;EAC5C;EAEAG,QAAQA,CAAA;IACN,OAAOF,YAAY,CAACG,OAAO,CAAC,IAAI,CAACd,QAAQ,CAAC;EAC5C;EAEAe,UAAUA,CAAA;IACR,OAAO,CAAC,CAAC,IAAI,CAACF,QAAQ,EAAE;EAC1B;EAEAG,MAAMA,CAAA;IACJL,YAAY,CAACM,UAAU,CAAC,IAAI,CAACjB,QAAQ,CAAC;EACxC;;;uBA3BWH,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXxB,WAAW;MAAAyB,OAAA,EAAXzB,WAAW,CAAA0B,IAAA;MAAAC,UAAA,EADE;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}