{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class TokenInterceptor {\n  constructor(auth, router) {\n    this.auth = auth;\n    this.router = router;\n  }\n  intercept(req, next) {\n    const token = this.auth.getToken();\n    const cloned = token ? req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    }) : req;\n    return next.handle(cloned).pipe(catchError(err => {\n      if (err.status === 401) {\n        this.auth.logout();\n        this.router.navigate(['/login']);\n      }\n      return throwError(() => err);\n    }));\n  }\n  static {\n    this.ɵfac = function TokenInterceptor_Factory(t) {\n      return new (t || TokenInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TokenInterceptor,\n      factory: TokenInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["catchError","throwError","TokenInterceptor","constructor","auth","router","intercept","req","next","token","getToken","cloned","clone","setHeaders","Authorization","handle","pipe","err","status","logout","navigate","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac"],"sources":["D:\\ASSIGNFRONTED\\cmed-prescription\\src\\app\\auth\\token-interceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { AuthService } from './auth.service';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n  constructor(private auth: AuthService, private router: Router) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler){\n    const token = this.auth.getToken();\n    const cloned = token ? req.clone({ setHeaders: { Authorization: `Bearer ${token}` } }) : req;\n    return next.handle(cloned).pipe(\n      catchError((err: HttpErrorResponse) => {\n        if (err.status === 401){ this.auth.logout(); this.router.navigate(['/login']); }\n        return throwError(() => err);\n      })\n    );\n  }\n}\n"],"mappings":"AAIA,SAASA,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,UAAU,QAAQ,MAAM;;;;AAGjC,OAAM,MAAOC,gBAAgB;EAC3BC,YAAoBC,IAAiB,EAAUC,MAAc;IAAzC,KAAAD,IAAI,GAAJA,IAAI;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEhEC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,KAAK,GAAG,IAAI,CAACL,IAAI,CAACM,QAAQ,EAAE;IAClC,MAAMC,MAAM,GAAGF,KAAK,GAAGF,GAAG,CAACK,KAAK,CAAC;MAAEC,UAAU,EAAE;QAAEC,aAAa,EAAE,UAAUL,KAAK;MAAE;IAAE,CAAE,CAAC,GAAGF,GAAG;IAC5F,OAAOC,IAAI,CAACO,MAAM,CAACJ,MAAM,CAAC,CAACK,IAAI,CAC7BhB,UAAU,CAAEiB,GAAsB,IAAI;MACpC,IAAIA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAC;QAAE,IAAI,CAACd,IAAI,CAACe,MAAM,EAAE;QAAE,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAAE;MAC/E,OAAOnB,UAAU,CAAC,MAAMgB,GAAG,CAAC;IAC9B,CAAC,CAAC,CACH;EACH;;;uBAZWf,gBAAgB,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAhBxB,gBAAgB;MAAAyB,OAAA,EAAhBzB,gBAAgB,CAAA0B;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}