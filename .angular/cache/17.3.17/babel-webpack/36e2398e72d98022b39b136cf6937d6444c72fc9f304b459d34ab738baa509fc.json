{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class TokenInterceptor {\n  constructor(auth) {\n    this.auth = auth;\n  }\n  intercept(req, next) {\n    const t = this.auth.getToken();\n    if (t) {\n      req = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${t}`\n        }\n      });\n    }\n    return next.handle(req);\n  }\n  static {\n    this.ɵfac = function TokenInterceptor_Factory(t) {\n      return new (t || TokenInterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TokenInterceptor,\n      factory: TokenInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["TokenInterceptor","constructor","auth","intercept","req","next","t","getToken","clone","setHeaders","Authorization","handle","i0","ɵɵinject","i1","AuthService","factory","ɵfac"],"sources":["D:\\ASSIGNFRONTED\\cmed-prescription\\src\\app\\auth\\token-interceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n  constructor(private auth: AuthService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const t = this.auth.getToken();\n    if (t) {\n      req = req.clone({ setHeaders: { Authorization: `Bearer ${t}` } });\n    }\n    return next.handle(req);\n  }\n}\n"],"mappings":";;AAMA,OAAM,MAAOA,gBAAgB;EAC3BC,YAAoBC,IAAiB;IAAjB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,CAAC,GAAG,IAAI,CAACJ,IAAI,CAACK,QAAQ,EAAE;IAC9B,IAAID,CAAC,EAAE;MACLF,GAAG,GAAGA,GAAG,CAACI,KAAK,CAAC;QAAEC,UAAU,EAAE;UAAEC,aAAa,EAAE,UAAUJ,CAAC;QAAE;MAAE,CAAE,CAAC;IACnE;IACA,OAAOD,IAAI,CAACM,MAAM,CAACP,GAAG,CAAC;EACzB;;;uBATWJ,gBAAgB,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAhBf,gBAAgB;MAAAgB,OAAA,EAAhBhB,gBAAgB,CAAAiB;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}