{"ast":null,"code":"import { RouterModule } from '@angular/router';\nimport { LoginComponent } from './auth/login/login.component';\nimport { AuthGuard } from './auth/auth.guard';\nimport { PrescriptionListComponent } from './prescriptions/prescription-list/prescription-list.component';\nimport { PrescriptionFormComponent } from './prescriptions/prescription-form/prescription-form.component';\nimport { ReportComponent } from './reports/report/report.component';\nimport { RxInteractionsComponent } from './rx/rx-interactions/rx-interactions.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nconst routes = [\n// public\n{\n  path: 'login',\n  component: LoginComponent\n},\n// protected (guard applies to these paths only)\n{\n  path: 'prescriptions',\n  canActivate: [AuthGuard],\n  component: PrescriptionListComponent\n}, {\n  path: 'prescriptions/create',\n  canActivate: [AuthGuard],\n  component: PrescriptionFormComponent\n}, {\n  path: 'prescriptions/:id/edit',\n  canActivate: [AuthGuard],\n  component: PrescriptionFormComponent\n}, {\n  path: 'reports/day-count',\n  canActivate: [AuthGuard],\n  component: ReportComponent\n}, {\n  path: 'rxnav',\n  canActivate: [AuthGuard],\n  component: RxInteractionsComponent\n},\n// default -> login\n{\n  path: '',\n  redirectTo: 'login',\n  pathMatch: 'full'\n},\n// fallback\n{\n  path: '**',\n  redirectTo: 'login'\n}];\nexport class AppRoutingModule {\n  static {\n    this.ɵfac = function AppRoutingModule_Factory(t) {\n      return new (t || AppRoutingModule)();\n    };\n  }\n  static {\n    this.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n      type: AppRoutingModule\n    });\n  }\n  static {\n    this.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n      imports: [RouterModule.forRoot(routes, {\n        useHash: true\n      }), RouterModule]\n    });\n  }\n}\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(AppRoutingModule, {\n    imports: [i1.RouterModule],\n    exports: [RouterModule]\n  });\n})();","map":{"version":3,"names":["RouterModule","LoginComponent","AuthGuard","PrescriptionListComponent","PrescriptionFormComponent","ReportComponent","RxInteractionsComponent","routes","path","component","canActivate","redirectTo","pathMatch","AppRoutingModule","forRoot","useHash","imports","i1","exports"],"sources":["D:\\ASSIGNFRONTED\\cmed-prescription\\src\\app\\app-routing.module.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './auth/login/login.component';\nimport { AuthGuard } from './auth/auth.guard';\nimport { PrescriptionListComponent } from './prescriptions/prescription-list/prescription-list.component';\nimport { PrescriptionFormComponent } from './prescriptions/prescription-form/prescription-form.component';\nimport { ReportComponent } from './reports/report/report.component';\nimport { RxInteractionsComponent } from './rx/rx-interactions/rx-interactions.component';\n\nconst routes: Routes = [\n  // public\n  { path: 'login', component: LoginComponent },\n\n  // protected (guard applies to these paths only)\n  { path: 'prescriptions', canActivate: [AuthGuard], component: PrescriptionListComponent },\n  { path: 'prescriptions/create', canActivate: [AuthGuard], component: PrescriptionFormComponent },\n  { path: 'prescriptions/:id/edit', canActivate: [AuthGuard], component: PrescriptionFormComponent },\n  { path: 'reports/day-count', canActivate: [AuthGuard], component: ReportComponent },\n  { path: 'rxnav', canActivate: [AuthGuard], component: RxInteractionsComponent },\n\n  // default -> login\n  { path: '', redirectTo: 'login', pathMatch: 'full' },\n\n  // fallback\n  { path: '**', redirectTo: 'login' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { useHash: true })], // useHash optional but helpful\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n"],"mappings":"AACA,SAASA,YAAY,QAAgB,iBAAiB;AACtD,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,yBAAyB,QAAQ,+DAA+D;AACzG,SAASC,yBAAyB,QAAQ,+DAA+D;AACzG,SAASC,eAAe,QAAQ,mCAAmC;AACnE,SAASC,uBAAuB,QAAQ,gDAAgD;;;AAExF,MAAMC,MAAM,GAAW;AACrB;AACA;EAAEC,IAAI,EAAE,OAAO;EAAEC,SAAS,EAAER;AAAc,CAAE;AAE5C;AACA;EAAEO,IAAI,EAAE,eAAe;EAAEE,WAAW,EAAE,CAACR,SAAS,CAAC;EAAEO,SAAS,EAAEN;AAAyB,CAAE,EACzF;EAAEK,IAAI,EAAE,sBAAsB;EAAEE,WAAW,EAAE,CAACR,SAAS,CAAC;EAAEO,SAAS,EAAEL;AAAyB,CAAE,EAChG;EAAEI,IAAI,EAAE,wBAAwB;EAAEE,WAAW,EAAE,CAACR,SAAS,CAAC;EAAEO,SAAS,EAAEL;AAAyB,CAAE,EAClG;EAAEI,IAAI,EAAE,mBAAmB;EAAEE,WAAW,EAAE,CAACR,SAAS,CAAC;EAAEO,SAAS,EAAEJ;AAAe,CAAE,EACnF;EAAEG,IAAI,EAAE,OAAO;EAAEE,WAAW,EAAE,CAACR,SAAS,CAAC;EAAEO,SAAS,EAAEH;AAAuB,CAAE;AAE/E;AACA;EAAEE,IAAI,EAAE,EAAE;EAAEG,UAAU,EAAE,OAAO;EAAEC,SAAS,EAAE;AAAM,CAAE;AAEpD;AACA;EAAEJ,IAAI,EAAE,IAAI;EAAEG,UAAU,EAAE;AAAO,CAAE,CACpC;AAMD,OAAM,MAAOE,gBAAgB;;;uBAAhBA,gBAAgB;IAAA;EAAA;;;YAAhBA;IAAgB;EAAA;;;gBAHjBb,YAAY,CAACc,OAAO,CAACP,MAAM,EAAE;QAAEQ,OAAO,EAAE;MAAI,CAAE,CAAC,EAC/Cf,YAAY;IAAA;EAAA;;;2EAEXa,gBAAgB;IAAAG,OAAA,GAAAC,EAAA,CAAAjB,YAAA;IAAAkB,OAAA,GAFjBlB,YAAY;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}